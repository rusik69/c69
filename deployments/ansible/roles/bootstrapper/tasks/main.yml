---
- name: install wakeonlan
  ansible.builtin.apt:
    name: wakeonlan, iptables-persistent
    state: present

- name: copy wol.sh
  ansible.builtin.copy:
    src: wol.sh
    dest: /usr/local/bin/wol.sh
    mode: 0755

- name: Enable IP forwarding
  ansible.builtin.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: yes

- name: Enable masquerading on wlan0
  ansible.builtin.iptables:
    table: nat
    chain: POSTROUTING
    out_interface: wlan0
    jump: MASQUERADE

- name: ensure /srv/tftp exists
  ansible.builtin.file:
    path: /srv/tftp
    state: directory

- name: Install dnsmasq
  ansible.builtin.apt:
    name: dnsmasq
    state: present

- name: Configure dnsmasq
  ansible.builtin.copy:
    dest: /etc/dnsmasq.d/pxe.conf
    content: |
      interface=enp0s31f6,lo
      bind-interfaces
      dhcp-range=enp0s31f6,10.0.0.10,10.0.0.200,255.255.255.0
      dhcp-host=28:d2:44:ed:85:f9,10.0.0.2
      dhcp-host=f0:de:f1:67:8c:92,10.0.0.3
      dhcp-host=3c:97:0e:71:77:ab,10.0.0.4
      dhcp-match=set:efi-x86_64,option:client-arch,7
      dhcp-boot=tag:efi-x86_64,grubnetx64.efi.signed
      dhcp-boot=pxelinux.0
      enable-tftp
      tftp-root=/srv/tftp
  register: dnsmasq_config

- name: Restart dnsmasq
  ansible.builtin.systemd:
    name: dnsmasq
    state: restarted
  become: true
  when: dnsmasq_config.changed

- name: ensure /srv/tftp/pxelinux.cfg dir exists
  ansible.builtin.file:
    path: /srv/tftp/pxelinux.cfg
    state: directory

- name: Download pxelinux.0
  ansible.builtin.get_url:
    url: http://archive.ubuntu.com/ubuntu/dists/focal/main/installer-amd64/current/legacy-images/netboot/pxelinux.0
    dest: /srv/tftp/pxelinux.0

- name: Download EFI boot files
  ansible.builtin.get_url:
    url: http://archive.ubuntu.com/ubuntu/dists/jammy/main/uefi/grub2-amd64/current/grubnetx64.efi.signed
    dest: /srv/tftp/grubnetx64.efi.signed

- name: Download Ubuntu 24.04 Live Server ISO
  ansible.builtin.get_url:
    url: https://releases.ubuntu.com/noble/ubuntu-24.04-live-server-amd64.iso
    dest: /srv/tftp/ubuntu-24.04-live-server-amd64.iso

- name: Mount Ubuntu 24.04 Live Server ISO
  ansible.builtin.mount:
    path: /mnt
    src: /srv/tftp/ubuntu-24.04-live-server-amd64.iso
    fstype: iso9660
    opts: loop
    state: mounted

- name: Copy kernel and initrd
  ansible.builtin.copy:
    src: /mnt/casper/{{ item }}
    dest: /srv/tftp/{{ item }}
  loop:
    - vmlinuz
    - initrd

- name: ensure /srv/tftp/grub directory exists
  ansible.builtin.file:
    path: /srv/tftp/grub
    state: directory

- name: ensure /srv/tftp/jammy directory exists
  ansible.builtin.file:
    path: /srv/tftp/jammy
    state: directory

- name: Create grub configuration file
  ansible.builtin.copy:
    dest: /srv/tftp/grub/grub.cfg
    content: |
      set default="0"
      set timeout=0

      menuentry "Install Ubuntu" {
        set gfxpayload=keep
        linux /vmlinuz ip=dhcp cloud-config-url=/dev/null url=http://10.0.0.1/ubuntu-24.04-live-server-amd64.iso autoinstall "ds=nocloud-net;s=http://10.0.0.1/jammy/"
        initrd /initrd
      }

- name: Create pxelinux.cfg directory
  ansible.builtin.file:
    path: /srv/tftp/pxelinux.cfg
    state: directory

- name: Install syslinux
  ansible.builtin.apt:
    name: syslinux-common
    state: present

- name: Copy ldlinux.c32 to TFTP root directory
  ansible.builtin.copy:
    src: /usr/lib/syslinux/modules/bios/ldlinux.c32
    dest: /srv/tftp/ldlinux.c32

- name: Create PXELINUX default configuration file
  ansible.builtin.copy:
    dest: /srv/tftp/pxelinux.cfg/default
    content: |
      DEFAULT linux
      LABEL linux
      KERNEL vmlinuz
      INITRD initrd
      APPEND ip=dhcp cloud-config-url=/dev/null url=http://10.0.0.1/ubuntu-24.04-live-server-amd64.iso autoinstall "ds=nocloud-net;s=http://10.0.0.1/jammy/"

- name: Install Nginx
  ansible.builtin.apt:
    name: nginx
    state: present

- name: Remove /etc/nginx/sites-enabled/default
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  register: nginx_default

- name: Configure Nginx to serve /srv/tftp
  ansible.builtin.copy:
    dest: /etc/nginx/sites-available/tftp
    content: |
      server {
        listen 80;
        server_name _;
        location / {
          root /srv/tftp;
          autoindex on;
        }
      }
  register: nginx_config

- name: Enable Nginx configuration
  ansible.builtin.file:
    src: /etc/nginx/sites-available/tftp
    dest: /etc/nginx/sites-enabled/tftp
    state: link

- name: Restart Nginx
  ansible.builtin.systemd:
    name: nginx
    state: restarted
  when: nginx_config.changed or nginx_default.changed

- name: Enable IP forwarding
  ansible.builtin.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: yes

- name: Add NAT from eth0 to wlan0
  ansible.builtin.iptables:
    table: nat
    chain: POSTROUTING
    out_interface: wlan0
    source: 10.0.0.0/24
    jump: MASQUERADE

- name: Create cloud-init configuration file for autoinstall
  ansible.builtin.copy:
    dest: /srv/tftp/jammy/user-data
    content: |
      #cloud-config
      autoinstall:
        version: 1
        identity:
          hostname: govnocloud
          password: $6$exDY1mhS4KUYCE/2$zmn9ToZwTKLhCw.b4/b.ZRTIZM30JZ4QrOQ2aOXJ8yk96xpcCof0kxKwuX1kqLG/ygbJ1f8wxED22bTL4F46P0
          username: ubuntu

- name: Create meta-data file for cloud-init
  ansible.builtin.file:
    dest: /srv/tftp/jammy/meta-data
    state: touch

- name: Create systemd service file for run.sh
  ansible.builtin.copy:
    dest: /etc/systemd/system/actions-runner.service
    content: |
      [Unit]
      Description=Actions Runner Service

      [Service]
      ExecStart=/home/ubuntu/actions-runner/run.sh
      Restart=always
      User=ubuntu
      Group=ubuntu
      Environment=PATH=/usr/bin:/usr/local/bin
      Environment=NODE_ENV=production
      WorkingDirectory=/home/ubuntu/actions-runner/

      [Install]
      WantedBy=multi-user.target
    mode: 0644
  register: govnocloud_actions_service
- name: Reload systemd manager configuration
  ansible.builtin.systemd:
    daemon_reload: yes
  when: govnocloud_actions_service.changed
- name: Enable actions-runner service
  ansible.builtin.systemd:
    name: actions-runner
    enabled: yes
- name: Start actions-runner service
  ansible.builtin.systemd:
    name: actions-runner
    state: started